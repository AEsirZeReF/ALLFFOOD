/* autocompletado de java ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz*/
drop DATABASE ALLFOOD;
CREATE DATABASE ALLFOOD;
USE ALLFOOD;
/*SELECT table_schema ALLFOOD, sum(data_length + index_length)/1024/1024 "size in MB" 
FROM information_schema.TABLES GROUP BY table_schema;*/
CREATE TABLE CLIENTE
(
cod_cli int NOT NULL auto_increment PRIMARY KEY,
usuario varchar(20) unique not null,
contra varchar(10) not null,
nom_cli varchar(50) NOT NULL,
ape_cli varchar(50) NOT NULL,
avatar longblob null,
edad_cli int NOT NULL,
celular_cli varchar(9) NOT NULL,
saldo_cli decimal default 0.0
);
select * from cliente;
CREATE TABLE CHEF
(
cod_chef int NOT NULL AUTO_INCREMENT PRIMARY KEY ,
usuario varchar(20) unique not null unique,
contra varchar(10) not null,
nom_chef varchar(50)NOT NULL,
ape_chef varchar(50)NOT NULL,
avatar longblob null,
presentacion varchar(100) not null,
edad_chef int NOT NULL,
celular_chef varchar(9) NOT NULL,
direccion varchar(50) NOT NULL,
saldo_chef  decimal (9,2)
);

CREATE TABLE SERVICIO
(
cod_servicio int NOT NULL auto_increment PRIMARY KEY,
nom_servicio varchar(50) unique NOT NULL,
cod_chef int NOT NULL,
platillos varchar(200) NOT NULL ,
descripcion varchar(200)NOT NULL,
logo longblob null,
precio_persona decimal (9,2),
fec_publicacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update current_timestamp,
CONSTRAINT FOREIGN KEY fk_COD_CHEF (cod_chef) REFERENCES CHEF (cod_chef)
);
CREATE TABLE PEDIDO
(
cod_pedido int not null auto_increment primary key,
cod_cli int NOT NULL ,
cod_servicio int NOT NULL,
cant_personas int NOT NULL,
fecha_compra TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update current_timestamp,
fecha_entrega TIMESTAMP ,
pago_total decimal (9,2),
direccion_entrega varchar(50) not null,
estado varchar(10) default 'PENDIENTE',
/*valoracion INT CHECK (valoracion >=1 and valoracion <=5),*/
CONSTRAINT FOREIGN KEY fk_COD_CLI (cod_cli) REFERENCES CLIENTE (cod_cli),
CONSTRAINT FOREIGN KEY fk_COD_SERVICIO(cod_servicio) REFERENCES SERVICIO (cod_servicio)
);
/****************************  CHEF  ****************************/
/* -Registrar Chef ------------------- */
delimiter @@
create procedure RegistrarChef
(usuario varchar(20),
contra varchar(10),
nom_chef varchar(50),
ape_chef varchar(50),
avatar longblob ,
presentacion varchar(100) ,
edad_chef int,
celular_chef varchar(9),
direccion varchar(50))
begin
insert into chef values (null,usuario,contra,nom_chef,ape_chef,avatar,presentacion,edad_chef,celular_chef,direccion,0.0);
end @@
delimiter ;
delimiter @@
create procedure ActualizarChef(codigo int,
								pass varchar(10),
								nombre_chef varchar(50),
								apellido_chef varchar(50),
								foto longblob ,
								presen varchar(100) ,
								celular varchar(9),
								dir varchar(50))
begin 
update chef set 
contra = pass,
nom_chef = nombre_chef,
ape_chef = apellido_chef,
avatar = foto,
presentacion = presen,
celular_chef = celular,
direccion = dir where cod_chef = codigo;
select * from chef;
end @@
delimiter ;
select * from chef;
call ActualizarChef(1,'123','Cuchi','Cu',null,'So pro','996006381','Las magnolias');


/*validar CHEF ----------------------- */
delimiter @@
create procedure ValidarChef(usuario1 varchar(20),contra1 varchar(10))
begin
select * from Chef where usuario = usuario1 and contra = contra1;
end @@
delimiter ;
call ValidarChef ('cuchicu','123');
select * from chef;
order by cod_servicio desc limit 6
delimiter @@
create procedure ListarChef()
begin
select * from chef  ;
end @@
delimiter ;
call ListarChef;
--
delimiter @@
create procedure ListarChefUltimos()
begin
select * from chef  order by cod_chef desc limit 6;
end @@
delimiter ;
call ListarChefUltimos;
--
delimiter @@
create procedure BuscarChefUsuario(chef varchar(20))
begin
select * from chef where usuario = chef;
end @@
delimiter ;
call BuscarChefUsuario('cuchicu');
/*CLIENTE********************************************************************/
/* -Registrar Cliente - */
delimiter @@
create procedure RegistrarCliente
(usuario varchar(20),
contra varchar(10),
nom_cli varchar(50),
ape_cli varchar(50),
avatar longblob,
edad_cli  int,
celular_cli  varchar(9),
saldo_cli  decimal)
begin
insert into cliente values (null,usuario,contra,nom_cli ,ape_cli,avatar ,edad_cli ,celular_cli ,saldo_cli );
end @@
delimiter ;
/*call RegistrarCliente('Pastel','74g5','Mario','Fernandez',null,25,'974652001',198);
call RegistrarCliente('eli','el12','Mario','Fernandez',null,25,'974652001',198);*/
select * from cliente;
/* validacion  del cliente*/
delimiter @@
create procedure ValidarCliente(userr varchar(20),contrase varchar(10))
begin
select * from cliente where usuario = userr and contra = contrase;
end @@
delimiter ;
call ValidarCliente ('eli','el12');
select*from Cliente;
/*Listar Cliente*/
delimiter @@
create procedure ListarCliente()
begin
select * from cliente;
end @@
delimiter ;
---
delimiter @@
create procedure ListarClienteUltimos()
begin
select * from cliente order by cod_cli desc limit 6;
end @@
delimiter ;
---
delimiter @@
create procedure ActualizarCliente
(
codigo int,
pass varchar(10),
nom_cliente varchar(50),
ape_cliente varchar(50),
logo longblob,
celular_cliente  varchar(9))
begin
update cliente set 
contra = pass,
nom_cli = nom_cliente ,
ape_cli =ape_cliente,
avatar=logo,
celular_cli=celular_cliente
where cod_cli = codigo;
end @@
delimiter ;
select * from cliente;
--
delimiter @@
create procedure BuscarClienteUsuario(cliente varchar(20))
begin 
select * from cliente where usuario = cliente;
end @@
delimiter ;
call BuscarClienteUsuario('eli');
/* SERVICIO  **************************************************************/
/* -Registrar SERVICIO - */
delimiter @@
create procedure RegistrarServicio
								(
								nom_servicio varchar(50),
								cod_chef int,
								platillos varchar(200) ,
								descripcion varchar(200),
								logo longblob,
								precio_persona decimal
)
begin
insert into servicio (nom_servicio,cod_chef,platillos ,descripcion,logo ,precio_persona )  
values (nom_servicio,cod_chef,platillos ,descripcion,logo ,precio_persona );
end @@
delimiter ;
/*call RegistrarServicio('Almuerzo marino',1,'Ceviche, Chicharon de pota','platillos frescos con variantes de acuerd al comensal',null,50);*/
delimiter @@
create procedure ActualizarServicio(
									codigo int,
									nombre varchar(50),
									platos varchar(200) ,
									descrip varchar(200),
									foto longblob,
									precio decimal
)
begin 
update servicio set nom_servicio = nombre ,platillos = platos,descripcion = descrip ,logo = foto,precio_persona = precio
where cod_servicio = codigo;
end @@
delimiter ;
call ActualizarServicio (1,'Almuerzo Mediterraneo','Bistec a lo rico','Ingrediente selectos',null,30.00);
select * from servicio;
delimiter @@
create procedure EliminarServicio(
								  codigo int)
begin 
delete from servicio where  cod_servicio = codigo;
end  @@                            
delimiter ;
call EliminarServicio(1);
/*Listar Servicio*/ 
delimiter @@
create procedure ListarServicio()
begin
select t2.cod_servicio,t2.nom_servicio,t1.cod_chef,t1.usuario,t2.platillos,t2.descripcion,t2.precio_persona,t2.fec_publicacion 
from  chef t1 inner join servicio t2 on t1.cod_chef=t2.cod_chef;
end @@
delimiter ;
drop procedure BuscarServicio

delimiter @@
create procedure ListarServicioUltimos()
begin
select t2.cod_servicio,t2.nom_servicio,t1.cod_chef,t1.usuario,t2.platillos,t2.descripcion,t2.precio_persona,t2.fec_publicacion 
from  chef t1 inner join servicio t2 on t1.cod_chef=t2.cod_chef order by cod_servicio desc limit 6;
end @@
delimiter ;
call ListarServicioUltimos;
----
delimiter @@
create procedure ListarServicioChef(chef varchar(20))
begin
select t2.cod_servicio,t2.nom_servicio,t1.cod_chef,t1.usuario,t2.platillos,t2.descripcion,t2.precio_persona,t2.fec_publicacion 
from  chef t1 inner join servicio t2 on t1.cod_chef=t2.cod_chef where t1.usuario = chef;
end @@
delimiter ;
call ListarServicioChef ('cuchicu')
delimiter @@
create procedure BuscarServicio(codigo int)
begin 
select t2.cod_servicio,t2.nom_servicio,t1.cod_chef,t1.usuario,t2.platillos,t2.descripcion,t2.precio_persona,t2.fec_publicacion 
from  chef t1 inner join servicio t2 on t1.cod_chef=t2.cod_chef where t2.cod_servicio = codigo;
end @@
delimiter ;
call BuscarServicio (1);
/*PEDIDO*****************************************************/
/*Registrar Pedido*/
delimiter @@
create procedure RegistrarPedido
(
cod_cli int,
cod_servicio int,
cant_personas int,
fec_entrega timestamp,
pago_total decimal(9.2),
direccion_entrega varchar(50))
begin
insert into pedido (cod_cli,cod_servicio,cant_personas,fecha_entrega,pago_total,direccion_entrega)
values (cod_cli,cod_servicio,cant_personas,fec_entrega,pago_total,direccion_entrega);
end@@
delimiter ;
/*call RegistrarPedido(1,1,20,'2019-12-20 10:02:52',500,'las lomas de zapallal 293');*/
/*Listar pedido*/
/*drop procedure ListarPedido;*/
delimiter @@
create procedure ListarPedido()
begin
select t2.cod_pedido,t1.cod_cli,t1.nom_cli,t1.ape_cli,t3.cod_servicio,t3.nom_servicio,t3.precio_persona,t4.cod_chef,t4.nom_chef,t4.ape_chef,
t2.cant_personas,t2.fecha_compra,t2.fecha_entrega,t2.direccion_entrega,t2.pago_total
from cliente t1 inner join pedido t2 on t1.cod_cli=t2.cod_cli
inner join servicio t3 on t2.cod_servicio=t3.cod_servicio 
inner join chef t4 on t3.cod_chef=t4.cod_chef;
end @@
delimiter ;
call ListarPedido;
--
delimiter @@
create procedure ListarPedidoCliente(usuarioCliente varchar(20))
begin
select t2.cod_pedido,t1.cod_cli,t1.nom_cli,t1.ape_cli,t3.cod_servicio,t3.nom_servicio,t3.precio_persona,t4.cod_chef,t4.usuario,t4.nom_chef,t4.ape_chef,
t2.cant_personas,t2.fecha_compra,t2.fecha_entrega,t2.direccion_entrega,t2.pago_total
from cliente t1 inner join pedido t2 on t1.cod_cli=t2.cod_cli
inner join servicio t3 on t2.cod_servicio=t3.cod_servicio 
inner join chef t4 on t3.cod_chef=t4.cod_chef where t1.usuario = usuarioCliente;
end @@
delimiter ;
call ListarPedidoCliente('eli');
--
delimiter @@
create procedure ListarPedidoChef(usuarioChef varchar(20))
begin
select t2.cod_pedido,t1.cod_cli,t1.nom_cli,t1.ape_cli,t3.cod_servicio,t3.nom_servicio,t3.precio_persona,t4.cod_chef,t4.usuario,t4.nom_chef,t4.ape_chef,
t2.cant_personas,t2.fecha_compra,t2.fecha_entrega,t2.direccion_entrega,t2.pago_total
from cliente t1 inner join pedido t2 on t1.cod_cli=t2.cod_cli
inner join servicio t3 on t2.cod_servicio=t3.cod_servicio 
inner join chef t4 on t3.cod_chef=t4.cod_chef where t4.usuario = usuarioChef;
end @@
delimiter ;
call ListarPedidoChef('cuchicu');

--
delimiter @@
create procedure ListarTopChef()
begin
select count(cod_pedido) ,t4.usuario ,t4.presentacion
from cliente t1 inner join pedido t2 on t1.cod_cli=t2.cod_cli
inner join servicio t3 on t2.cod_servicio=t3.cod_servicio 
inner join chef t4 on t3.cod_chef=t4.cod_chef group by t4.usuario ,t4.presentacion order by count(cod_pedido) desc  limit 5;
end @@
delimiter ;
call ListarTopChef;
